/*     */ package com.eoos.jdbc;
/*     */ 
/*     */ import java.sql.CallableStatement;
/*     */ import java.sql.Connection;
/*     */ import java.sql.DatabaseMetaData;
/*     */ import java.sql.PreparedStatement;
/*     */ import java.sql.SQLException;
/*     */ import java.sql.SQLWarning;
/*     */ import java.sql.Savepoint;
/*     */ import java.sql.Statement;
/*     */ import java.util.Map;
/*     */ 
/*     */ public class ConnectionWrapper implements Connection {
/*     */   private Connection delegate;
/*     */   
/*     */   public ConnectionWrapper(Connection delegate) {
/*  17 */     this.delegate = delegate;
/*     */   }
/*     */   
/*     */   public void clearWarnings() throws SQLException {
/*  21 */     this.delegate.clearWarnings();
/*     */   }
/*     */   
/*     */   public void close() throws SQLException {
/*  25 */     this.delegate.close();
/*     */   }
/*     */   
/*     */   public void commit() throws SQLException {
/*  29 */     this.delegate.commit();
/*     */   }
/*     */   
/*     */   public Statement createStatement() throws SQLException {
/*  33 */     return new StatementWrapper(this.delegate.createStatement());
/*     */   }
/*     */   
/*     */   public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
/*  37 */     return new StatementWrapper(this.delegate.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability));
/*     */   }
/*     */   
/*     */   public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
/*  41 */     return new StatementWrapper(this.delegate.createStatement(resultSetType, resultSetConcurrency));
/*     */   }
/*     */   
/*     */   public boolean getAutoCommit() throws SQLException {
/*  45 */     return this.delegate.getAutoCommit();
/*     */   }
/*     */   
/*     */   public String getCatalog() throws SQLException {
/*  49 */     return this.delegate.getCatalog();
/*     */   }
/*     */   
/*     */   public int getHoldability() throws SQLException {
/*  53 */     return this.delegate.getHoldability();
/*     */   }
/*     */   
/*     */   public DatabaseMetaData getMetaData() throws SQLException {
/*  57 */     return this.delegate.getMetaData();
/*     */   }
/*     */   
/*     */   public int getTransactionIsolation() throws SQLException {
/*  61 */     return this.delegate.getTransactionIsolation();
/*     */   }
/*     */   
/*     */   public Map getTypeMap() throws SQLException {
/*  65 */     return this.delegate.getTypeMap();
/*     */   }
/*     */   
/*     */   public SQLWarning getWarnings() throws SQLException {
/*  69 */     return this.delegate.getWarnings();
/*     */   }
/*     */   
/*     */   public boolean isClosed() throws SQLException {
/*  73 */     return this.delegate.isClosed();
/*     */   }
/*     */   
/*     */   public boolean isReadOnly() throws SQLException {
/*  77 */     return this.delegate.isReadOnly();
/*     */   }
/*     */   
/*     */   public String nativeSQL(String sql) throws SQLException {
/*  81 */     return this.delegate.nativeSQL(sql);
/*     */   }
/*     */   
/*     */   public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
/*  85 */     return this.delegate.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
/*     */   }
/*     */   
/*     */   public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
/*  89 */     return this.delegate.prepareCall(sql, resultSetType, resultSetConcurrency);
/*     */   }
/*     */   
/*     */   public CallableStatement prepareCall(String sql) throws SQLException {
/*  93 */     return this.delegate.prepareCall(sql);
/*     */   }
/*     */   
/*     */   public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
/*  97 */     return new PreparedStatementWrapper(this.delegate.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability));
/*     */   }
/*     */   
/*     */   public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
/* 101 */     return new PreparedStatementWrapper(this.delegate.prepareStatement(sql, resultSetType, resultSetConcurrency));
/*     */   }
/*     */   
/*     */   public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
/* 105 */     return new PreparedStatementWrapper(this.delegate.prepareStatement(sql, autoGeneratedKeys));
/*     */   }
/*     */   
/*     */   public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
/* 109 */     return new PreparedStatementWrapper(this.delegate.prepareStatement(sql, columnIndexes));
/*     */   }
/*     */   
/*     */   public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
/* 113 */     return new PreparedStatementWrapper(this.delegate.prepareStatement(sql, columnNames));
/*     */   }
/*     */   
/*     */   public PreparedStatement prepareStatement(String sql) throws SQLException {
/* 117 */     return new PreparedStatementWrapper(this.delegate.prepareStatement(sql));
/*     */   }
/*     */   
/*     */   public void releaseSavepoint(Savepoint savepoint) throws SQLException {
/* 121 */     this.delegate.releaseSavepoint(savepoint);
/*     */   }
/*     */   
/*     */   public void rollback() throws SQLException {
/* 125 */     this.delegate.rollback();
/*     */   }
/*     */   
/*     */   public void rollback(Savepoint savepoint) throws SQLException {
/* 129 */     this.delegate.rollback(savepoint);
/*     */   }
/*     */   
/*     */   public void setAutoCommit(boolean autoCommit) throws SQLException {
/* 133 */     this.delegate.setAutoCommit(autoCommit);
/*     */   }
/*     */   
/*     */   public void setCatalog(String catalog) throws SQLException {
/* 137 */     this.delegate.setCatalog(catalog);
/*     */   }
/*     */   
/*     */   public void setHoldability(int holdability) throws SQLException {
/* 141 */     this.delegate.setHoldability(holdability);
/*     */   }
/*     */   
/*     */   public void setReadOnly(boolean readOnly) throws SQLException {
/* 145 */     this.delegate.setReadOnly(readOnly);
/*     */   }
/*     */   
/*     */   public Savepoint setSavepoint() throws SQLException {
/* 149 */     return this.delegate.setSavepoint();
/*     */   }
/*     */   
/*     */   public Savepoint setSavepoint(String name) throws SQLException {
/* 153 */     return this.delegate.setSavepoint(name);
/*     */   }
/*     */   
/*     */   public void setTransactionIsolation(int level) throws SQLException {
/* 157 */     this.delegate.setTransactionIsolation(level);
/*     */   }
/*     */   
/*     */   public void setTypeMap(Map<String, Class<?>> arg0) throws SQLException {
/* 161 */     this.delegate.setTypeMap(arg0);
/*     */   }
/*     */ }


/* Location:              D:\tech\G TIS\tis2web.jar!\com\eoos\jdbc\ConnectionWrapper.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.3
 */