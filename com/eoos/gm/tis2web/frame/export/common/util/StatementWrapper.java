/*     */ package com.eoos.gm.tis2web.frame.export.common.util;
/*     */ 
/*     */ import com.eoos.scsm.v2.util.Util;
/*     */ import java.sql.Connection;
/*     */ import java.sql.ResultSet;
/*     */ import java.sql.SQLException;
/*     */ import java.sql.SQLWarning;
/*     */ import java.sql.Statement;
/*     */ import java.util.Iterator;
/*     */ import java.util.LinkedList;
/*     */ import java.util.List;
/*     */ import java.util.Queue;
/*     */ import java.util.TimerTask;
/*     */ import java.util.concurrent.ConcurrentLinkedQueue;
/*     */ 
/*     */ public class StatementWrapper
/*     */   implements Statement
/*     */ {
/*  19 */   private static Queue queryQueue = new ConcurrentLinkedQueue();
/*     */   
/*     */   static {
/*  22 */     TimerTask worker = Util.createTimerTask(new Runnable()
/*     */         {
/*     */           public void run() {
/*  25 */             IDatabaseStatistics statistics = DatabaseStatistics.getInstance();
/*  26 */             for (Iterator<String> iter = StatementWrapper.queryQueue.iterator(); iter.hasNext(); ) {
/*  27 */               statistics.register(iter.next());
/*  28 */               iter.remove();
/*     */             } 
/*     */           }
/*     */         });
/*     */     
/*  33 */     Util.getTimer().scheduleAtFixedRate(worker, 10000L, 10000L);
/*     */   }
/*     */ 
/*     */   
/*     */   private Statement delegate;
/*  38 */   protected List batchList = new LinkedList();
/*     */   
/*     */   public StatementWrapper(Statement stmt) {
/*  41 */     this.delegate = stmt;
/*     */   }
/*     */   
/*     */   protected String logExecution(String query) {
/*  45 */     queryQueue.add(query);
/*  46 */     return query;
/*     */   }
/*     */   
/*     */   public void addBatch(String sql) throws SQLException {
/*  50 */     this.batchList.add(sql);
/*  51 */     this.delegate.addBatch(sql);
/*     */   }
/*     */   
/*     */   public void cancel() throws SQLException {
/*  55 */     this.delegate.cancel();
/*     */   }
/*     */   
/*     */   public void clearBatch() throws SQLException {
/*  59 */     this.batchList.clear();
/*  60 */     this.delegate.clearBatch();
/*     */   }
/*     */   
/*     */   public void clearWarnings() throws SQLException {
/*  64 */     this.delegate.clearWarnings();
/*     */   }
/*     */   
/*     */   public void close() throws SQLException {
/*  68 */     this.delegate.close();
/*     */   }
/*     */   
/*     */   public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
/*  72 */     return this.delegate.execute(logExecution(sql), autoGeneratedKeys);
/*     */   }
/*     */   
/*     */   public boolean execute(String sql, int[] columnIndexes) throws SQLException {
/*  76 */     return this.delegate.execute(logExecution(sql), columnIndexes);
/*     */   }
/*     */   
/*     */   public boolean execute(String sql, String[] columnNames) throws SQLException {
/*  80 */     return this.delegate.execute(logExecution(sql), columnNames);
/*     */   }
/*     */   
/*     */   public boolean execute(String sql) throws SQLException {
/*  84 */     return this.delegate.execute(logExecution(sql));
/*     */   }
/*     */   
/*     */   public int[] executeBatch() throws SQLException {
/*  88 */     for (Iterator<String> iter = this.batchList.iterator(); iter.hasNext();) {
/*  89 */       logExecution(iter.next());
/*     */     }
/*  91 */     return this.delegate.executeBatch();
/*     */   }
/*     */   
/*     */   public ResultSet executeQuery(String sql) throws SQLException {
/*  95 */     return this.delegate.executeQuery(logExecution(sql));
/*     */   }
/*     */   
/*     */   public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
/*  99 */     return this.delegate.executeUpdate(logExecution(sql), autoGeneratedKeys);
/*     */   }
/*     */   
/*     */   public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
/* 103 */     return this.delegate.executeUpdate(logExecution(sql), columnIndexes);
/*     */   }
/*     */   
/*     */   public int executeUpdate(String sql, String[] columnNames) throws SQLException {
/* 107 */     return this.delegate.executeUpdate(logExecution(sql), columnNames);
/*     */   }
/*     */   
/*     */   public int executeUpdate(String sql) throws SQLException {
/* 111 */     return this.delegate.executeUpdate(logExecution(sql));
/*     */   }
/*     */   
/*     */   public Connection getConnection() throws SQLException {
/* 115 */     return this.delegate.getConnection();
/*     */   }
/*     */   
/*     */   public int getFetchDirection() throws SQLException {
/* 119 */     return this.delegate.getFetchDirection();
/*     */   }
/*     */   
/*     */   public int getFetchSize() throws SQLException {
/* 123 */     return this.delegate.getFetchSize();
/*     */   }
/*     */   
/*     */   public ResultSet getGeneratedKeys() throws SQLException {
/* 127 */     return this.delegate.getGeneratedKeys();
/*     */   }
/*     */   
/*     */   public int getMaxFieldSize() throws SQLException {
/* 131 */     return this.delegate.getMaxFieldSize();
/*     */   }
/*     */   
/*     */   public int getMaxRows() throws SQLException {
/* 135 */     return this.delegate.getMaxRows();
/*     */   }
/*     */   
/*     */   public boolean getMoreResults() throws SQLException {
/* 139 */     return this.delegate.getMoreResults();
/*     */   }
/*     */   
/*     */   public boolean getMoreResults(int current) throws SQLException {
/* 143 */     return this.delegate.getMoreResults(current);
/*     */   }
/*     */   
/*     */   public int getQueryTimeout() throws SQLException {
/* 147 */     return this.delegate.getQueryTimeout();
/*     */   }
/*     */   
/*     */   public ResultSet getResultSet() throws SQLException {
/* 151 */     return this.delegate.getResultSet();
/*     */   }
/*     */   
/*     */   public int getResultSetConcurrency() throws SQLException {
/* 155 */     return this.delegate.getResultSetConcurrency();
/*     */   }
/*     */   
/*     */   public int getResultSetHoldability() throws SQLException {
/* 159 */     return this.delegate.getResultSetHoldability();
/*     */   }
/*     */   
/*     */   public int getResultSetType() throws SQLException {
/* 163 */     return this.delegate.getResultSetType();
/*     */   }
/*     */   
/*     */   public int getUpdateCount() throws SQLException {
/* 167 */     return this.delegate.getUpdateCount();
/*     */   }
/*     */   
/*     */   public SQLWarning getWarnings() throws SQLException {
/* 171 */     return this.delegate.getWarnings();
/*     */   }
/*     */   
/*     */   public void setCursorName(String name) throws SQLException {
/* 175 */     this.delegate.setCursorName(name);
/*     */   }
/*     */   
/*     */   public void setEscapeProcessing(boolean enable) throws SQLException {
/* 179 */     this.delegate.setEscapeProcessing(enable);
/*     */   }
/*     */   
/*     */   public void setFetchDirection(int direction) throws SQLException {
/* 183 */     this.delegate.setFetchDirection(direction);
/*     */   }
/*     */   
/*     */   public void setFetchSize(int rows) throws SQLException {
/* 187 */     this.delegate.setFetchSize(rows);
/*     */   }
/*     */   
/*     */   public void setMaxFieldSize(int max) throws SQLException {
/* 191 */     this.delegate.setMaxFieldSize(max);
/*     */   }
/*     */   
/*     */   public void setMaxRows(int max) throws SQLException {
/* 195 */     this.delegate.setMaxRows(max);
/*     */   }
/*     */   
/*     */   public void setQueryTimeout(int seconds) throws SQLException {
/* 199 */     this.delegate.setQueryTimeout(seconds);
/*     */   }
/*     */ }


/* Location:              D:\tech\G TIS\tis2web.jar!\com\eoos\gm\tis2web\frame\export\commo\\util\StatementWrapper.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.3
 */